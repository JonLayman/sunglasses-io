swagger: '2.0'
info:
  title: Sunglasses-io eval
  description: An API to support the Sunglasses-io platform
  version: 1.0.0
host: api.sunglasses.com
schemes:
  - http
basePath: /v1
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
tags: 
- name: 'store'
  description: "Accessing Your sunglasses orders"
- name: 'user'
  description: "Operations about the user"
paths:
  /store/brands:
    get:
      tags:
      - 'store'
      summary: "Returns brands of sunglasses sold by store"
      description: "Returns a list of brands available for purchase"
      operationId: "getBrands"
      produces:
      - "application/json"
      parameters: 
      - name: search
        in: query
        description: "Search for brands by name"
        required: false
        type: string
      responses: 
        200:
          description: "Successful Operation"
          schema:
            $ref: '#/definitions/BrandsList'
  /store/brands/{Id}/products:
    get:
      tags:
      - 'store'
      summary: "Return products by brand Id"
      description: "Get a list of products associated by brand"
      operationId: 'getProductsByBrandId'
      security: 
        - bearerAuth: []
      produces: 
      - "application/json"
      parameters:
      - name: 'Id'
        in: 'path'
        description: "ID of sunglasses brand to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200: 
          description: "Successful Operation"
          schema: 
            $ref: '#/definitions/Products'
        400: 
          description: "Invalid ID"
        404:
          description: "Brand Not Found"
  /store/products:
    get: 
      tags:
      - 'store'
      summary: 'Returns all inventory of the store'
      description: "Inventory of sunglasses to be fetched"
      operationId: "getInventory"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful Operation"
          schema: 
            $ref: '#/definitions/Products'
        404:
          description: "Invetory not found"
  /login:
    post:
      tags:
        - "user"
      summary: "User Login"
      description: "This endpoint is used for authentication and generates access token"
      operationId: "userLogin"
      produces: 
        - "application/json"
      parameters: 
        - in: body
          name: credentials
          description: "User credentials for login"
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: "Successful login"
          schema: 
            $ref: '#/definitions/LoginResponse'
        401:
          description: "Unauthorized - Invalid credentials"
  /me/cart:
    get: 
      tags:
        - "user"
      summary: "Get users shopping cart"
      description: "Return the shopping cart of current logged in user"
      operationId: 'getUserCart'
      security:
        - bearerAuth: []
      produces:
        - 'application/json'
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/CartItem'
        401:
          description: "Unauthorized - User not authenticated"
    post:
      tags:
       - "user"
      summary: "Update users shopping cart"
      description: "Modify contents of current users shopping cart"
      operationId: "modifyUserCart"
      security:
        - bearerAuth: []
      produces:
        - "application/json"
      parameters:
        - in: body
          name: cartModification
          description: "Details for modifying the shopping cart"
          required: true
          schema:
            $ref: '#/definitions/CartModification'
      responses:
        200: 
          description: "Successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Indicates if the modifications were successful"
        401:
          description: "Unauthorized - User not authenticated"
  /me/cart/{productId}:
    delete:
      tags:
        - "user"
      summary: "Delete item from users shopping cart"
      description: "Remove a specific product from the current users shopping cart"
      operationId: "removeCartItem"
      security:
        - bearerAuth: []
      produces: 
        - "application/json"
      parameters:
        - name: productId
          in: path
          description: "ID of the product to be removed from the users shopping cart"
          required: true 
          type: integer
          format: int64
      responses:
        204:
          description: "Product successfully removed from the cart"
        401:
          description: "Unauthorized - User not authenticated"
        404:
          description: "Product not found in cart"
    post:
      tags:
        - "user"
      summary: "Add quantity of a product to the current users shopping cart"
      description:  "Add a certain quantity of a specific product to the current users cart"
      operationId: "addProductToCart"
      security:
        - bearerAuth: []
      produces:
        - "application/json"
      parameters:
        - name: productId
          in: path
          description: "ID of the product to be added to the shopping cart"
          required: true
          type: integer
          format: int64
        - in: body
          name: cartModification
          description: "Details for modifying the shopping cart"
          required: true 
          schema:
            type: object
            properties:
              quantity:
                type: integer
      responses:
        200: 
          description: "Successful operation"
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: "Indicates if the modification was successful"
        401:
          description: "Unauthorized - User not authenticated"
definitions:
  BrandsList:
    type: array
    items:
      $ref: '#/definitions/Brand'
  Brand:
    type: object
    properties: 
      id:
        type: string
        description: 'Unique identifer for the brand'
      name: 
        type: string 
        description: 'Name of the brand'
  Products:
    type: object
    properties:
      id:
        type: string
        description: "Unique identifier for the product"
      categoryId:
        type: string
        description: "Id of the category that the product belongs to"
      name: 
        type: string
        description: 'Name of the product'
      description: 
        type: string
        description: 'Description of the product'
      price: 
        type: number 
        description: 'Price of the product'
      imageUrls: 
        type: array 
        items:
          type: string
        description: "List of Images for the product"
  LoginResponse:
    type: object
    properties:
      accessToken:
        type: string
        description: "Access token generated upon successful login"
  CartItem: 
    allOf:
      - $ref: '#/definitions/Products'
      - type: object
        properties: 
          quantity:
            type: integer
            description: 'Quantity of the product in the cart'
  CartModification:
    type: object
    properties:
      productId:
        type: string
        description: "Unique identifier for the product"
      quantity: 
        type: integer
        description: 'Quantity to be modified in the cart'